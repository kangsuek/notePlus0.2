# notePlus - Cursor AI 개발 규칙

## 프로젝트 개요
- **제품명**: notePlus
- **설명**: 마크다운 메모 + 계산기 macOS 네이티브 앱
- **기술 스택**: Electron + React + TypeScript + Vite
- **개발 방법론**: TDD (Test-Driven Development) 기반 애자일 개발

## 핵심 개발 원칙

### 1. TDD (Test-Driven Development)
- **모든 기능 개발 시 테스트부터 작성**
- 개발 순서: 테스트 실패 → 구현 → 테스트 통과 → 리팩토링
- 테스트 프레임워크: Jest + React Testing Library
- 목표 테스트 커버리지: 70% 이상
- 유닛 테스트 + 통합 테스트 필수
- 모든 테스트 통과 후에만 배포/병합

### 2. 코드 품질
- **단일 책임 원칙**: 함수는 하나의 역할만 수행
- **읽기 쉬운 코드**: 의도를 명확히 표현, 최소한의 주석
- **Prettier + ESLint**: 코드 스타일 자동 적용 및 검사
- **TypeScript 엄격 모드**: 타입 안정성 최우선
- **함수형 프로그래밍**: 가능한 순수 함수 작성, 부작용 최소화

### 3. 보안 원칙
- **Electron 보안 모델 준수**:
  - `nodeIntegration: false`
  - `contextIsolation: true`
- **CSP (Content Security Policy)** 적용
- **안전한 수식 계산**: mathjs 사용, eval() 절대 금지
- **코드 인젝션 방지**: 사용자 입력 검증 필수

## 기술 스택 및 라이브러리

### 필수 라이브러리
- `marked`: 마크다운 파싱
- `mathjs`: 안전한 수식 계산
- `electron-store`: 로컬 스토리지 관리
- `styled-components`: UI 스타일링

### 개발 도구
- Vite: 빌드 도구
- electron-builder: 패키징
- Jest: 테스트 러너
- ESLint + Prettier: 코드 품질 관리

## UI/UX 가이드라인

### 디자인 원칙
- **macOS Human Interface Guidelines** 준수
- **Dark Mode / Light Mode** 지원 필수
- **반응형 레이아웃**: ResizablePane으로 영역 크기 조절
- **네이티브 느낌**: macOS 네이티브 앱처럼 동작해야 함

### 화면 구성
- **Sidebar**: 최근 문서 목록 (접기/펼치기 가능)
- **Editor**: 마크다운 편집기 (라인 넘버 표시)
- **Preview**: 실시간 HTML 프리뷰
- **StatusBar**: 커서 위치, 파일 인코딩, 저장 상태
- **MenuBar**: File, Edit, View, Window, Help

### 주요 인터랙션
- 실시간 마크다운 프리뷰
- `=` 입력 시 즉시 계산 결과 표시
- Editor ↔ Preview 양방향 스크롤 동기화 (무한 루프 방지)
- 드래그 앤 드롭 파일 열기
- 키보드 단축키 지원 (Cmd+N, Cmd+O, Cmd+S 등)

## 파일 구조 및 네이밍

### 디렉토리 구조
```
src/
├── main/           # Electron 메인 프로세스
├── renderer/       # React 렌더러 프로세스
├── shared/         # 공유 타입 및 유틸리티
├── components/     # React 컴포넌트
├── hooks/          # 커스텀 훅
├── utils/          # 유틸리티 함수
└── __tests__/      # 테스트 파일
```

### 네이밍 컨벤션
- **컴포넌트**: PascalCase (예: `MarkdownEditor.tsx`)
- **훅**: camelCase with 'use' prefix (예: `useMarkdown.ts`)
- **유틸리티**: camelCase (예: `calculateExpression.ts`)
- **테스트**: `*.test.ts` 또는 `*.spec.ts`
- **상수**: UPPER_SNAKE_CASE (예: `MAX_RECENT_FILES`)

## 성능 목표
- 앱 시작 시간: 3초 이내
- 메모리 사용량: 100MB 이하
- 테스트 실행 시간 최소화
- 번들 크기 최적화

## 코드 작성 시 주의사항

### DO (반드시 할 것)
✅ 기능 구현 전 테스트 먼저 작성
✅ TypeScript 타입 명시적으로 정의
✅ 에러 핸들링 및 엣지 케이스 처리
✅ 함수는 작고 명확한 하나의 역할만
✅ 컴포넌트는 재사용 가능하게 설계
✅ IPC 통신 시 타입 안정성 보장
✅ 사용자 입력 검증 및 sanitization

### DON'T (절대 하지 말 것)
❌ eval() 또는 Function() 생성자 사용
❌ 테스트 없이 코드 배포
❌ nodeIntegration 활성화
❌ 하드코딩된 값 (상수로 분리)
❌ 100줄 이상의 긴 함수
❌ any 타입 남용
❌ console.log 남겨두기 (개발용은 제거)

## 현재 개발 단계
- **Phase**: Phase 1 (MVP) - 프로젝트 시작 단계
- **우선순위**:
  1. 프로젝트 환경 설정 (Electron + React + TypeScript)
  2. 기본 UI 구조 구현
  3. 마크다운 편집 기능
  4. 수식 계산 기능
  5. 최근 문서 관리

## 추가 지침
- 커밋 메시지는 명확하고 구체적으로 작성
- PR 시 테스트 결과 포함 필수
- 문서화는 코드와 함께 업데이트
- 성능 저하 발생 시 프로파일링 후 최적화
- 접근성(Accessibility) 고려

## 참고 문서
- docs/01.prd: 상세한 제품 요구사항
- docs/02.progress-status.md: 개발 진행 상황 및 계획

